{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar OutMode_1 = require(\"../../Enums/OutMode\");\n\nvar Utils_1 = require(\"../Utils/Utils\");\n\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\n\nvar Mover_1 = require(\"./Mover\");\n\nvar RotateDirection_1 = require(\"../../Enums/RotateDirection\");\n\nvar SizeAnimationStatus_1 = require(\"../../Enums/SizeAnimationStatus\");\n\nvar OpacityAnimationStatus_1 = require(\"../../Enums/OpacityAnimationStatus\");\n\nvar Updater = function () {\n  function Updater(container, particle) {\n    this.container = container;\n    this.particle = particle;\n    this.mover = new Mover_1.Mover(container, particle);\n  }\n\n  Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n    if (coordinate + radius > size && velocity > 0 || coordinate - radius < 0 && velocity < 0) {\n      outside();\n    }\n  };\n\n  Updater.prototype.update = function (delta) {\n    this.mover.move(delta);\n    this.updateOpacity();\n    this.updateSize();\n    this.updateAngle();\n    this.fixOutOfCanvasPosition();\n    this.updateOutMode();\n  };\n\n  Updater.prototype.updateOpacity = function () {\n    var particle = this.particle;\n\n    if (particle.particlesOptions.opacity.animation.enable) {\n      switch (particle.opacity.status) {\n        case OpacityAnimationStatus_1.OpacityAnimationStatus.increasing:\n          if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n            particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing;\n          } else {\n            particle.opacity.value += particle.opacity.velocity || 0;\n          }\n\n          break;\n\n        case OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing:\n          if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n            particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.increasing;\n          } else {\n            particle.opacity.value -= particle.opacity.velocity || 0;\n          }\n\n          break;\n      }\n\n      if (particle.opacity.value < 0) {\n        particle.opacity.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateSize = function () {\n    var _a;\n\n    var container = this.container;\n    var particle = this.particle;\n\n    if (particle.particlesOptions.size.animation.enable) {\n      switch (particle.size.status) {\n        case SizeAnimationStatus_1.SizeAnimationStatus.increasing:\n          if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n            particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.decreasing;\n          } else {\n            particle.size.value += particle.size.velocity || 0;\n          }\n\n          break;\n\n        case SizeAnimationStatus_1.SizeAnimationStatus.decreasing:\n          if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n            particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.increasing;\n          } else {\n            particle.size.value -= particle.size.velocity || 0;\n          }\n\n      }\n\n      if (particle.size.value < 0) {\n        particle.size.value = 0;\n      }\n    }\n  };\n\n  Updater.prototype.updateAngle = function () {\n    var particle = this.particle;\n\n    if (particle.particlesOptions.rotate.animation.enable) {\n      switch (particle.rotateDirection) {\n        case RotateDirection_1.RotateDirection.clockwise:\n          particle.angle += particle.particlesOptions.rotate.animation.speed * Math.PI / 18;\n\n          if (particle.angle > 360) {\n            particle.angle -= 360;\n          }\n\n          break;\n\n        case RotateDirection_1.RotateDirection.counterClockwise:\n        default:\n          particle.angle -= particle.particlesOptions.rotate.animation.speed * Math.PI / 18;\n\n          if (particle.angle < 0) {\n            particle.angle += 360;\n          }\n\n          break;\n      }\n    }\n  };\n\n  Updater.prototype.fixOutOfCanvasPosition = function () {\n    var container = this.container;\n    var particle = this.particle;\n    var outMode = particle.particlesOptions.move.outMode;\n    var canvasSize = container.canvas.size;\n    var newPos;\n\n    if (outMode === OutMode_1.OutMode.bounce) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: particle.size.value\n      };\n    } else if (outMode === OutMode_1.OutMode.bounceHorizontal) {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: particle.size.value,\n        right: canvasSize.width,\n        top: -particle.size.value - particle.offset.y\n      };\n    } else if (outMode === OutMode_1.OutMode.bounceVertical) {\n      newPos = {\n        bottom: canvasSize.height,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: particle.size.value\n      };\n    } else {\n      newPos = {\n        bottom: canvasSize.height + particle.size.value - particle.offset.y,\n        left: -particle.size.value - particle.offset.x,\n        right: canvasSize.width + particle.size.value + particle.offset.x,\n        top: -particle.size.value - particle.offset.y\n      };\n    }\n\n    if (outMode === OutMode_1.OutMode.destroy) {\n      var sizeValue = particle.size.value;\n\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      var sizeValue = particle.size.value;\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n        particle.position.y = Math.random() * canvasSize.height;\n      } else if (nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n\n      if (nextBounds.top > canvasSize.height - particle.offset.y) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.position.y = newPos.top;\n      } else if (nextBounds.bottom < -particle.offset.y) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.position.y = newPos.bottom;\n      }\n    }\n  };\n\n  Updater.prototype.updateOutMode = function () {\n    var particle = this.particle;\n\n    switch (particle.particlesOptions.move.outMode) {\n      case OutMode_1.OutMode.bounce:\n      case OutMode_1.OutMode.bounceVertical:\n      case OutMode_1.OutMode.bounceHorizontal:\n        this.updateBounce();\n        break;\n    }\n  };\n\n  Updater.prototype.updateBounce = function () {\n    var container = this.container;\n    var options = container.options;\n    var particle = this.particle;\n\n    if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n      if (!container.polygon.checkInsidePolygon(particle.position)) {\n        this.polygonBounce();\n      }\n    } else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n      if (particle.initialPosition) {\n        var dist = Utils_1.Utils.getDistanceBetweenCoordinates(particle.initialPosition, particle.position);\n\n        if (dist > container.retina.polygonMaskMoveRadius) {\n          this.polygonBounce();\n        }\n      }\n    } else {\n      var outMode = particle.particlesOptions.move.outMode;\n      var x = particle.position.x + particle.offset.x;\n      var y = particle.position.y + particle.offset.y;\n\n      if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceHorizontal) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.horizontal;\n        Updater.checkBounds(x, size, container.canvas.size.width, velocity, function () {\n          particle.velocity.horizontal *= -1;\n        });\n      }\n\n      if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceVertical) {\n        var size = particle.size.value;\n        var velocity = particle.velocity.vertical;\n        Updater.checkBounds(y, size, container.canvas.size.height, velocity, function () {\n          particle.velocity.vertical *= -1;\n        });\n      }\n    }\n  };\n\n  Updater.prototype.polygonBounce = function () {\n    var particle = this.particle;\n    particle.velocity.horizontal = -particle.velocity.horizontal + particle.velocity.vertical / 2;\n    particle.velocity.vertical = -particle.velocity.vertical + particle.velocity.horizontal / 2;\n  };\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/home/jhon/Web/iTresse/itresse-landing/node_modules/tsparticles/dist/Classes/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","OutMode_1","require","Utils_1","PolygonMaskType_1","Mover_1","RotateDirection_1","SizeAnimationStatus_1","OpacityAnimationStatus_1","Updater","container","particle","mover","Mover","checkBounds","coordinate","radius","size","velocity","outside","prototype","update","delta","move","updateOpacity","updateSize","updateAngle","fixOutOfCanvasPosition","updateOutMode","particlesOptions","opacity","animation","enable","status","OpacityAnimationStatus","increasing","decreasing","minimumValue","_a","SizeAnimationStatus","sizeValue","retina","rotate","rotateDirection","RotateDirection","clockwise","angle","speed","Math","PI","counterClockwise","outMode","canvasSize","canvas","newPos","OutMode","bounce","bottom","height","left","right","width","top","bounceHorizontal","offset","y","bounceVertical","x","destroy","Utils","isPointInside","position","particles","remove","nextBounds","calculateBounds","random","updateBounce","options","polygon","type","PolygonMaskType","none","inline","checkInsidePolygon","polygonBounce","initialPosition","dist","getDistanceBetweenCoordinates","polygonMaskMoveRadius","horizontal","vertical"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OutMode_1 = require(\"../../Enums/OutMode\");\nvar Utils_1 = require(\"../Utils/Utils\");\nvar PolygonMaskType_1 = require(\"../../Enums/PolygonMaskType\");\nvar Mover_1 = require(\"./Mover\");\nvar RotateDirection_1 = require(\"../../Enums/RotateDirection\");\nvar SizeAnimationStatus_1 = require(\"../../Enums/SizeAnimationStatus\");\nvar OpacityAnimationStatus_1 = require(\"../../Enums/OpacityAnimationStatus\");\nvar Updater = (function () {\n    function Updater(container, particle) {\n        this.container = container;\n        this.particle = particle;\n        this.mover = new Mover_1.Mover(container, particle);\n    }\n    Updater.checkBounds = function (coordinate, radius, size, velocity, outside) {\n        if ((coordinate + radius > size && velocity > 0) ||\n            (coordinate - radius < 0 && velocity < 0)) {\n            outside();\n        }\n    };\n    Updater.prototype.update = function (delta) {\n        this.mover.move(delta);\n        this.updateOpacity();\n        this.updateSize();\n        this.updateAngle();\n        this.fixOutOfCanvasPosition();\n        this.updateOutMode();\n    };\n    Updater.prototype.updateOpacity = function () {\n        var particle = this.particle;\n        if (particle.particlesOptions.opacity.animation.enable) {\n            switch (particle.opacity.status) {\n                case OpacityAnimationStatus_1.OpacityAnimationStatus.increasing:\n                    if (particle.opacity.value >= particle.particlesOptions.opacity.value) {\n                        particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.opacity.value += (particle.opacity.velocity || 0);\n                    }\n                    break;\n                case OpacityAnimationStatus_1.OpacityAnimationStatus.decreasing:\n                    if (particle.opacity.value <= particle.particlesOptions.opacity.animation.minimumValue) {\n                        particle.opacity.status = OpacityAnimationStatus_1.OpacityAnimationStatus.increasing;\n                    }\n                    else {\n                        particle.opacity.value -= (particle.opacity.velocity || 0);\n                    }\n                    break;\n            }\n            if (particle.opacity.value < 0) {\n                particle.opacity.value = 0;\n            }\n        }\n    };\n    Updater.prototype.updateSize = function () {\n        var _a;\n        var container = this.container;\n        var particle = this.particle;\n        if (particle.particlesOptions.size.animation.enable) {\n            switch (particle.size.status) {\n                case SizeAnimationStatus_1.SizeAnimationStatus.increasing:\n                    if (particle.size.value >= ((_a = particle.sizeValue) !== null && _a !== void 0 ? _a : container.retina.sizeValue)) {\n                        particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.size.value += (particle.size.velocity || 0);\n                    }\n                    break;\n                case SizeAnimationStatus_1.SizeAnimationStatus.decreasing:\n                    if (particle.size.value <= particle.particlesOptions.size.animation.minimumValue) {\n                        particle.size.status = SizeAnimationStatus_1.SizeAnimationStatus.increasing;\n                    }\n                    else {\n                        particle.size.value -= (particle.size.velocity || 0);\n                    }\n            }\n            if (particle.size.value < 0) {\n                particle.size.value = 0;\n            }\n        }\n    };\n    Updater.prototype.updateAngle = function () {\n        var particle = this.particle;\n        if (particle.particlesOptions.rotate.animation.enable) {\n            switch (particle.rotateDirection) {\n                case RotateDirection_1.RotateDirection.clockwise:\n                    particle.angle += particle.particlesOptions.rotate.animation.speed * Math.PI / 18;\n                    if (particle.angle > 360) {\n                        particle.angle -= 360;\n                    }\n                    break;\n                case RotateDirection_1.RotateDirection.counterClockwise:\n                default:\n                    particle.angle -= particle.particlesOptions.rotate.animation.speed * Math.PI / 18;\n                    if (particle.angle < 0) {\n                        particle.angle += 360;\n                    }\n                    break;\n            }\n        }\n    };\n    Updater.prototype.fixOutOfCanvasPosition = function () {\n        var container = this.container;\n        var particle = this.particle;\n        var outMode = particle.particlesOptions.move.outMode;\n        var canvasSize = container.canvas.size;\n        var newPos;\n        if (outMode === OutMode_1.OutMode.bounce) {\n            newPos = {\n                bottom: canvasSize.height,\n                left: particle.size.value,\n                right: canvasSize.width,\n                top: particle.size.value,\n            };\n        }\n        else if (outMode === OutMode_1.OutMode.bounceHorizontal) {\n            newPos = {\n                bottom: canvasSize.height + particle.size.value - particle.offset.y,\n                left: particle.size.value,\n                right: canvasSize.width,\n                top: -particle.size.value - particle.offset.y,\n            };\n        }\n        else if (outMode === OutMode_1.OutMode.bounceVertical) {\n            newPos = {\n                bottom: canvasSize.height,\n                left: -particle.size.value - particle.offset.x,\n                right: canvasSize.width + particle.size.value + particle.offset.x,\n                top: particle.size.value,\n            };\n        }\n        else {\n            newPos = {\n                bottom: canvasSize.height + particle.size.value - particle.offset.y,\n                left: -particle.size.value - particle.offset.x,\n                right: canvasSize.width + particle.size.value + particle.offset.x,\n                top: -particle.size.value - particle.offset.y,\n            };\n        }\n        if (outMode === OutMode_1.OutMode.destroy) {\n            var sizeValue = particle.size.value;\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, sizeValue)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            var sizeValue = particle.size.value;\n            var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n            if (nextBounds.left > canvasSize.width - particle.offset.x) {\n                particle.position.x = newPos.left;\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n            else if (nextBounds.right < -particle.offset.x) {\n                particle.position.x = newPos.right;\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n            if (nextBounds.top > canvasSize.height - particle.offset.y) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.position.y = newPos.top;\n            }\n            else if (nextBounds.bottom < -particle.offset.y) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.position.y = newPos.bottom;\n            }\n        }\n    };\n    Updater.prototype.updateOutMode = function () {\n        var particle = this.particle;\n        switch (particle.particlesOptions.move.outMode) {\n            case OutMode_1.OutMode.bounce:\n            case OutMode_1.OutMode.bounceVertical:\n            case OutMode_1.OutMode.bounceHorizontal:\n                this.updateBounce();\n                break;\n        }\n    };\n    Updater.prototype.updateBounce = function () {\n        var container = this.container;\n        var options = container.options;\n        var particle = this.particle;\n        if (options.polygon.enable && options.polygon.type !== PolygonMaskType_1.PolygonMaskType.none &&\n            options.polygon.type !== PolygonMaskType_1.PolygonMaskType.inline) {\n            if (!container.polygon.checkInsidePolygon(particle.position)) {\n                this.polygonBounce();\n            }\n        }\n        else if (options.polygon.enable && options.polygon.type === PolygonMaskType_1.PolygonMaskType.inline) {\n            if (particle.initialPosition) {\n                var dist = Utils_1.Utils.getDistanceBetweenCoordinates(particle.initialPosition, particle.position);\n                if (dist > container.retina.polygonMaskMoveRadius) {\n                    this.polygonBounce();\n                }\n            }\n        }\n        else {\n            var outMode = particle.particlesOptions.move.outMode;\n            var x = particle.position.x + particle.offset.x;\n            var y = particle.position.y + particle.offset.y;\n            if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceHorizontal) {\n                var size = particle.size.value;\n                var velocity = particle.velocity.horizontal;\n                Updater.checkBounds(x, size, container.canvas.size.width, velocity, function () {\n                    particle.velocity.horizontal *= -1;\n                });\n            }\n            if (outMode === OutMode_1.OutMode.bounce || outMode === OutMode_1.OutMode.bounceVertical) {\n                var size = particle.size.value;\n                var velocity = particle.velocity.vertical;\n                Updater.checkBounds(y, size, container.canvas.size.height, velocity, function () {\n                    particle.velocity.vertical *= -1;\n                });\n            }\n        }\n    };\n    Updater.prototype.polygonBounce = function () {\n        var particle = this.particle;\n        particle.velocity.horizontal = -particle.velocity.horizontal + (particle.velocity.vertical / 2);\n        particle.velocity.vertical = -particle.velocity.vertical + (particle.velocity.horizontal / 2);\n    };\n    return Updater;\n}());\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}